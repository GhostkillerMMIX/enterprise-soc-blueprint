name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Job 1: Secret Scanning
  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog secret scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks secret scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Custom secret pattern scan
        run: |
          echo "Scanning for SOC-specific sensitive patterns..."
          
          # Check for potential Splunk passwords
          grep -r -i -E "(splunk.*password|admin.*password)" . --exclude-dir=.git || echo "No Splunk passwords found"
          
          # Check for AWS credentials
          grep -r -i -E "(aws_access_key|aws_secret)" . --exclude-dir=.git || echo "No AWS credentials found"
          
          # Check for API keys
          grep -r -i -E "(api[_-]?key|apikey)" . --exclude-dir=.git --exclude="*.md" || echo "No API keys found"
          
          # Check for private keys
          find . -name "*.pem" -o -name "*.key" -o -name "*.p12" | grep -v ".git" || echo "No private key files found"

  # Job 2: Dependency Scanning
  dependency-scanning:
    name: Dependency Scanning
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Scan Python dependencies
        run: |
          # Create requirements file from Python imports
          find . -name "*.py" -exec grep -h "^import\|^from" {} \; | sort -u > temp_requirements.txt
          
          # Install safety for vulnerability scanning
          pip install safety
          
          # Scan for known vulnerabilities
          safety check --json || echo "Safety scan completed with findings"

      - name: Run Snyk security scan
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

  # Job 3: Infrastructure Security Scanning
  infrastructure-security:
    name: Infrastructure Security Scanning
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'

      - name: Run Semgrep security scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/terraform
            p/ansible
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        continue-on-error: true

      - name: Run Bandit security scan for Python
        run: |
          pip install bandit
          bandit -r soar/ -f json -o bandit-results.json || echo "Bandit scan completed"
          
          if [ -f bandit-results.json ]; then
            echo "Bandit scan results:"
            cat bandit-results.json
          fi

  # Job 4: SOAR Security Validation
  soar-security:
    name: SOAR Security Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Validate SOAR playbooks
        run: |
          echo "Validating SOAR playbooks for security issues..."
          
          # Check for hardcoded credentials
          grep -r -i -E "(password|secret|key|token)" soar/ --include="*.py" | grep -v "phantom.act" | grep -v "parameters" || echo "No hardcoded credentials found"
          
          # Check for proper error handling
          echo "Checking error handling in SOAR playbooks..."
          for playbook in soar/playbooks/*.py; do
            if grep -q "try:" "$playbook" && grep -q "except:" "$playbook"; then
              echo "✓ $playbook has error handling"
            else
              echo "⚠ $playbook may lack proper error handling"
            fi
          done
          
          # Check for logging usage
          echo "Checking logging usage..."
          for playbook in soar/playbooks/*.py; do
            if grep -q "phantom.debug\|phantom.error" "$playbook"; then
              echo "✓ $playbook uses proper logging"
            else
              echo "⚠ $playbook may lack proper logging"
            fi
          done

      - name: Validate SOAR custom apps
        run: |
          echo "Validating SOAR custom apps..."
          for app in soar/custom-apps/*.py; do
            echo "Checking $app"
            python3 -m py_compile "$app"
            echo "✓ $app compiles successfully"
          done

  # Job 5: Splunk Security Validation
  splunk-security:
    name: Splunk Security Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Splunk configurations
        run: |
          echo "Validating Splunk configurations for security..."
          
          # Check for SSL/TLS configuration
          if grep -r "enableSplunkdSSL.*true" splunk/; then
            echo "✓ SSL/TLS is enabled in Splunk configurations"
          else
            echo "⚠ SSL/TLS may not be properly configured"
          fi
          
          # Check for proper authentication settings
          if grep -r "authentication" splunk/; then
            echo "✓ Authentication configurations found"
          else
            echo "⚠ Authentication may not be configured"
          fi
          
          # Validate SPL injection prevention
          echo "Checking for SPL injection prevention..."
          grep -r "search.*\$" splunk/ --include="*.conf" || echo "✓ No obvious SPL injection patterns found"

      - name: Check Splunk app permissions
        run: |
          echo "Checking Splunk app file permissions..."
          find splunk/apps/ -type f -name "*.conf" -exec echo "Checking: {}" \;

  # Job 6: Network Security Validation
  network-security:
    name: Network Security Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate security group configurations
        run: |
          echo "Validating security group configurations..."
          
          # Check for overly permissive rules
          if grep -r "0.0.0.0/0" infrastructure/terraform/security_groups.tf; then
            echo "⚠ Found potential overly permissive security group rules"
            grep -n "0.0.0.0/0" infrastructure/terraform/security_groups.tf
          else
            echo "✓ No overly permissive rules found"
          fi
          
          # Check for proper port restrictions
          echo "Checking port configurations..."
          grep -r "from_port\|to_port" infrastructure/terraform/security_groups.tf | head -10

      - name: Validate VPC configuration
        run: |
          echo "Validating VPC security configuration..."
          
          # Check for proper subnet isolation
          if grep -r "private_subnet" infrastructure/terraform/vpc.tf; then
            echo "✓ Private subnets configured"
          else
            echo "⚠ Private subnets may not be properly configured"
          fi
          
          # Check for NAT Gateway configuration
          if grep -r "nat_gateway" infrastructure/terraform/vpc.tf; then
            echo "✓ NAT Gateway configured for private subnets"
          else
            echo "⚠ NAT Gateway may not be configured"
          fi

  # Job 7: Compliance Check
  compliance-check:
    name: Compliance and Best Practices
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check documentation completeness
        run: |
          echo "Checking documentation completeness..."
          
          required_docs=("README.md" "CONTRIBUTING.md" "LICENSE" "SECURITY.md" "CODE_OF_CONDUCT.md")
          
          for doc in "${required_docs[@]}"; do
            if [ -f "$doc" ]; then
              echo "✓ $doc exists"
            else
              echo "✗ $doc is missing"
              exit 1
            fi
          done

      - name: Check MITRE ATT&CK coverage
        run: |
          echo "Checking MITRE ATT&CK technique coverage..."
          
          # Count T-codes in detection rules
          technique_count=$(grep -r -o "T[0-9]\{4\}\(\.[0-9]\{3\}\)\?" splunk/apps/ | sort -u | wc -l)
          echo "Found $technique_count unique MITRE ATT&CK techniques covered"
          
          if [ "$technique_count" -ge 20 ]; then
            echo "✓ Good MITRE ATT&CK coverage ($technique_count techniques)"
          else
            echo "⚠ Limited MITRE ATT&CK coverage ($technique_count techniques)"
          fi

      - name: Validate deployment scripts
        run: |
          echo "Validating deployment scripts..."
          
          # Check script permissions and syntax
          for script in scripts/deployment/*.sh scripts/validation/*.sh; do
            if [ -f "$script" ]; then
              echo "Checking $script"
              bash -n "$script" && echo "✓ $script syntax OK" || echo "✗ $script has syntax errors"
            fi
          done

  # Job 8: Generate Security Report
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [secret-scanning, dependency-scanning, infrastructure-security, soar-security, splunk-security, network-security, compliance-check]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-report.md
          echo "Generated on: $(date)" >> security-report.md
          echo "" >> security-report.md
          echo "## Scan Results" >> security-report.md
          echo "- Secret Scanning: ${{ needs.secret-scanning.result }}" >> security-report.md
          echo "- Dependency Scanning: ${{ needs.dependency-scanning.result }}" >> security-report.md
          echo "- Infrastructure Security: ${{ needs.infrastructure-security.result }}" >> security-report.md
          echo "- SOAR Security: ${{ needs.soar-security.result }}" >> security-report.md
          echo "- Splunk Security: ${{ needs.splunk-security.result }}" >> security-report.md
          echo "- Network Security: ${{ needs.network-security.result }}" >> security-report.md
          echo "- Compliance Check: ${{ needs.compliance-check.result }}" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md
          retention-days: 30
