name: Detection Rules Validation

on:
  push:
    paths:
      - 'splunk/apps/**'
      - 'scripts/validation/**'
      - '.github/workflows/detection-validation.yml'
  pull_request:
    paths:
      - 'splunk/apps/**'
      - 'scripts/validation/**'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Job 1: SPL Syntax Validation
  spl-validation:
    name: SPL Syntax Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Splunk SDK
        run: |
          pip install splunk-sdk
          pip install lxml
          pip install requests

      - name: Validate Splunk App Structure
        run: |
          echo "Validating Splunk app structure..."
          
          for app in splunk/apps/*/; do
            app_name=$(basename "$app")
            echo "Validating app: $app_name"
            
            # Check required files
            required_files=("default/app.conf")
            for file in "${required_files[@]}"; do
              if [ -f "$app/$file" ]; then
                echo "✓ $app_name has $file"
              else
                echo "✗ $app_name missing $file"
                exit 1
              fi
            done
            
            # Validate app.conf format
            if grep -q "\[install\]" "$app/default/app.conf"; then
              echo "✓ $app_name app.conf has proper format"
            else
              echo "✗ $app_name app.conf format issues"
              exit 1
            fi
          done

      - name: Validate Detection Rules SPL
        run: |
          echo "Validating SPL syntax in detection rules..."
          
          python3 << 'EOF'
          import re
          import glob
          import sys
          
          def validate_spl_search(search_content):
              """Basic SPL syntax validation"""
              issues = []
              
              # Check for basic SPL structure
              if not re.search(r'(index=|search\s)', search_content):
                  issues.append("Missing index specification or search command")
              
              # Check for proper field usage
              if '| eval' in search_content and not re.search(r'\|\s*eval\s+\w+\s*=', search_content):
                  issues.append("Potential eval syntax issue")
              
              # Check for proper stats usage
              if '| stats' in search_content and not re.search(r'\|\s*stats\s+\w+', search_content):
                  issues.append("Potential stats syntax issue")
              
              # Check for MITRE ATT&CK technique mapping
              if not re.search(r'T\d{4}(\.\d{3})?', search_content):
                  issues.append("Missing MITRE ATT&CK technique mapping")
              
              return issues
          
          def validate_savedsearches_file(filepath):
              """Validate savedsearches.conf file"""
              print(f"Validating: {filepath}")
              
              with open(filepath, 'r') as f:
                  content = f.read()
              
              # Extract search definitions
              searches = re.findall(r'\[([^\]]+)\]\s*\n((?:[^[].*\n)*)', content)
              
              all_valid = True
              for search_name, search_config in searches:
                  if search_name.startswith('SOC -'):
                      print(f"  Checking detection rule: {search_name}")
                      
                      # Extract search query
                      search_match = re.search(r'search\s*=\s*(.+?)(?=\n\w+\s*=|\n\[|\Z)', search_config, re.DOTALL)
                      if search_match:
                          search_query = search_match.group(1).strip()
                          issues = validate_spl_search(search_query)
                          
                          if issues:
                              print(f"    ✗ Issues found: {', '.join(issues)}")
                              all_valid = False
                          else:
                              print(f"    ✓ SPL syntax looks good")
                      else:
                          print(f"    ⚠ Could not extract search query")
              
              return all_valid
          
          # Find and validate all savedsearches.conf files
          savedsearches_files = glob.glob('splunk/apps/*/default/savedsearches.conf')
          
          all_files_valid = True
          for file_path in savedsearches_files:
              if not validate_savedsearches_file(file_path):
                  all_files_valid = False
          
          if not all_files_valid:
              print("❌ SPL validation failed")
              sys.exit(1)
          else:
              print("✅ All SPL validation passed")
          EOF

      - name: Check MITRE ATT&CK Coverage
        run: |
          echo "Analyzing MITRE ATT&CK coverage..."
          
          python3 << 'EOF'
          import re
          import glob
          
          # Extract all MITRE techniques from detection rules
          techniques = set()
          
          for file_path in glob.glob('splunk/apps/*/default/savedsearches.conf'):
              with open(file_path, 'r') as f:
                  content = f.read()
              
              # Find T-codes
              found_techniques = re.findall(r'T\d{4}(?:\.\d{3})?', content)
              techniques.update(found_techniques)
          
          print(f"MITRE ATT&CK Techniques Covered: {len(techniques)}")
          print("Techniques found:")
          for technique in sorted(techniques):
              print(f"  - {technique}")
          
          # Coverage analysis
          if len(techniques) >= 20:
              print("✅ Excellent MITRE ATT&CK coverage")
          elif len(techniques) >= 10:
              print("✓ Good MITRE ATT&CK coverage")
          else:
              print("⚠ Limited MITRE ATT&CK coverage - consider adding more detection rules")
          EOF

  # Job 2: Detection Logic Testing
  detection-testing:
    name: Detection Logic Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Test detection rule logic
        run: |
          echo "Testing detection rule logic..."
          
          # Simulate detection rule testing
          python3 << 'EOF'
          import re
          import glob
          
          def test_detection_rule(rule_name, search_query):
              """Test detection rule for common issues"""
              issues = []
              
              # Check for performance issues
              if '| join' in search_query and '| stats' in search_query:
                  issues.append("Potential performance issue: join with stats")
              
              # Check for proper time bounds
              if 'earliest=' not in search_query and 'latest=' not in search_query:
                  issues.append("Missing time bounds - may impact performance")
              
              # Check for proper field validation
              if '| where' in search_query:
                  if not re.search(r'\|\s*where\s+\w+\s*[><=!]', search_query):
                      issues.append("Potential where clause syntax issue")
              
              # Check for risk scoring
              if 'risk_score' not in search_query:
                  issues.append("Missing risk_score field for RBA")
              
              return issues
          
          # Test all detection rules
          for file_path in glob.glob('splunk/apps/*/default/savedsearches.conf'):
              with open(file_path, 'r') as f:
                  content = f.read()
              
              searches = re.findall(r'\[([^\]]+)\]\s*\n((?:[^[].*\n)*)', content)
              
              for search_name, search_config in searches:
                  if search_name.startswith('SOC -'):
                      search_match = re.search(r'search\s*=\s*(.+?)(?=\n\w+\s*=|\n\[|\Z)', search_config, re.DOTALL)
                      if search_match:
                          search_query = search_match.group(1).strip()
                          issues = test_detection_rule(search_name, search_query)
                          
                          if issues:
                              print(f"⚠ {search_name}: {', '.join(issues)}")
                          else:
                              print(f"✓ {search_name}: Looks good")
          EOF

      - name: Validate dashboard XML
        run: |
          echo "Validating Splunk dashboard XML..."
          
          for dashboard in splunk/apps/*/default/data/ui/views/*.xml; do
            if [ -f "$dashboard" ]; then
              echo "Validating $(basename "$dashboard")"
              
              # Basic XML validation
              python3 -c "
              import xml.etree.ElementTree as ET
              try:
                  ET.parse('$dashboard')
                  print('✓ $(basename "$dashboard") is valid XML')
              except ET.ParseError as e:
                  print('✗ $(basename "$dashboard") has XML syntax errors: $e')
                  exit(1)
              "
            fi
          done

  # Job 3: Performance Analysis
  performance-analysis:
    name: Performance Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Analyze detection rule performance
        run: |
          echo "Analyzing detection rule performance characteristics..."
          
          python3 << 'EOF'
          import re
          import glob
          
          def analyze_performance(search_query):
              """Analyze search performance characteristics"""
              score = 100  # Start with perfect score
              recommendations = []
              
              # Performance impact factors
              if '| join' in search_query:
                  score -= 20
                  recommendations.append("Consider using stats instead of join")
              
              if '| append' in search_query:
                  score -= 15
                  recommendations.append("Append can be expensive - consider alternatives")
              
              if re.search(r'index=\*', search_query):
                  score -= 25
                  recommendations.append("Searching all indexes - specify target indexes")
              
              if 'earliest=-' not in search_query:
                  score -= 30
                  recommendations.append("Missing time bounds - will search all time")
              
              if '| eval' in search_query and search_query.count('| eval') > 3:
                  score -= 10
                  recommendations.append("Multiple eval statements - consider consolidating")
              
              return score, recommendations
          
          # Analyze all detection rules
          for file_path in glob.glob('splunk/apps/*/default/savedsearches.conf'):
              with open(file_path, 'r') as f:
                  content = f.read()
              
              searches = re.findall(r'\[([^\]]+)\]\s*\n((?:[^[].*\n)*)', content)
              
              for search_name, search_config in searches:
                  if search_name.startswith('SOC -'):
                      search_match = re.search(r'search\s*=\s*(.+?)(?=\n\w+\s*=|\n\[|\Z)', search_config, re.DOTALL)
                      if search_match:
                          search_query = search_match.group(1).strip()
                          score, recommendations = analyze_performance(search_query)
                          
                          print(f"Rule: {search_name}")
                          print(f"  Performance Score: {score}/100")
                          if recommendations:
                              print(f"  Recommendations: {'; '.join(recommendations)}")
                          print()
          EOF

      - name: Check resource requirements
        run: |
          echo "Checking infrastructure resource requirements..."
          
          # Analyze Terraform resource definitions
          echo "Instance types configured:"
          grep -r "instance_type" infrastructure/terraform/ | grep -v ".terraform" || echo "No instance types found"
          
          echo "Storage requirements:"
          grep -r "volume_size" infrastructure/terraform/ | grep -v ".terraform" || echo "No volume sizes found"
