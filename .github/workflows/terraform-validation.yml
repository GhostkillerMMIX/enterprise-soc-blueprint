name: Terraform Validation

on:
  push:
    paths:
      - 'infrastructure/terraform/**'
      - '.github/workflows/terraform-validation.yml'
  pull_request:
    paths:
      - 'infrastructure/terraform/**'
      - '.github/workflows/terraform-validation.yml'
  workflow_dispatch:

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: 'us-east-1'

jobs:
  terraform-validation:
    name: Terraform Validation and Security
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infrastructure/terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Cache Terraform plugins
        uses: actions/cache@v3
        with:
          path: infrastructure/terraform/.terraform
          key: ${{ runner.os }}-terraform-${{ hashFiles('infrastructure/terraform/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -backend=false

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v3
        with:
          tflint_version: latest

      - name: Show TFLint version
        run: tflint --version

      - name: Init TFLint
        run: tflint --init

      - name: Run TFLint
        id: tflint
        run: tflint --recursive --format compact
        continue-on-error: true

      - name: Setup TFSec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: infrastructure/terraform
          soft_fail: true

      - name: Run Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infrastructure/terraform
          framework: terraform
          output_format: sarif
          output_file_path: checkov-terraform.sarif
          soft_fail: true

      - name: Upload Checkov results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov-terraform.sarif

      - name: Terraform Plan (Dry Run)
        id: plan
        run: |
          cp terraform.tfvars.example terraform.tfvars
          # Use dummy values for validation
          sed -i 's/YourSecurePassword123!/DummyPassword123!/g' terraform.tfvars
          sed -i 's/your-key-pair-name/dummy-key/g' terraform.tfvars
          sed -i 's/security-team@your-company.com/test@example.com/g' terraform.tfvars
          terraform plan -no-color -input=false
        continue-on-error: true

      - name: Comment PR with Terraform results
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const output = `#### Terraform Validation Results üèóÔ∏è
            
            #### Terraform Format and Style üñåÔ∏è
            \`${{ steps.fmt.outcome }}\`
            
            #### Terraform Initialization ‚öôÔ∏è
            \`${{ steps.init.outcome }}\`
            
            #### Terraform Validation ü§ñ
            \`${{ steps.validate.outcome }}\`
            
            #### TFLint üîç
            \`${{ steps.tflint.outcome }}\`
            
            #### Terraform Plan üìñ
            \`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan Output</summary>
            
            \`\`\`terraform
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  # Job 2: Terraform Security Scanning
  terraform-security:
    name: Terraform Security Scanning
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run TFSec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: infrastructure/terraform
          format: sarif
          output: tfsec.sarif

      - name: Upload TFSec scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: tfsec.sarif

      - name: Run Terraform security scan with Snyk
        uses: snyk/actions/iac@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          file: infrastructure/terraform/
        continue-on-error: true

  # Job 3: Cost Estimation
  terraform-cost:
    name: Terraform Cost Estimation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    defaults:
      run:
        working-directory: infrastructure/terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init -backend=false

      - name: Generate Terraform Plan for Cost Analysis
        run: |
          cp terraform.tfvars.example terraform.tfvars
          sed -i 's/YourSecurePassword123!/DummyPassword123!/g' terraform.tfvars
          sed -i 's/your-key-pair-name/dummy-key/g' terraform.tfvars
          terraform plan -out=tfplan -no-color
        continue-on-error: true

      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Generate Infracost JSON
        run: infracost breakdown --path=tfplan --format=json --out-file=infracost.json
        continue-on-error: true

      - name: Post Infracost comment
        uses: infracost/actions/comment@v1
        if: success()
        with:
          path: infrastructure/terraform/infracost.json
          behavior: update

  # Job 4: Terraform Documentation
  terraform-docs:
    name: Generate Terraform Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Render terraform docs inside the README.md and push changes back to PR branch
        uses: terraform-docs/gh-actions@v1.0.0
        with:
          working-dir: infrastructure/terraform
          output-file: README.md
          output-method: inject
          git-push: "true"
