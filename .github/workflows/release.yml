name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.1.0)'
        required: true
        default: 'v1.0.0'

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Job 1: Pre-release Validation
  pre-release-validation:
    name: Pre-release Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate version format
        run: |
          if [[ "${{ github.event.inputs.version || github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚úì Valid version format"
          else
            echo "‚úó Invalid version format. Use semantic versioning (e.g., v1.0.0)"
            exit 1
          fi

      - name: Check changelog update
        run: |
          if grep -q "${{ github.event.inputs.version || github.ref_name }}" CHANGELOG.md; then
            echo "‚úì Changelog updated for this version"
          else
            echo "‚ö† Changelog may not be updated for this version"
          fi

      - name: Validate all components
        run: |
          echo "Running comprehensive validation..."
          
          # Check critical files exist
          critical_files=("README.md" "LICENSE" "CONTRIBUTING.md" "SECURITY.md")
          for file in "${critical_files[@]}"; do
            if [ -f "$file" ]; then
              echo "‚úì $file exists"
            else
              echo "‚úó Critical file missing: $file"
              exit 1
            fi
          done
          
          # Check infrastructure code
          if [ -d "infrastructure/terraform" ] && [ -d "infrastructure/ansible" ]; then
            echo "‚úì Infrastructure code present"
          else
            echo "‚úó Infrastructure code missing"
            exit 1
          fi
          
          # Check Splunk apps
          app_count=$(find splunk/apps -name "app.conf" | wc -l)
          if [ "$app_count" -ge 3 ]; then
            echo "‚úì Splunk apps present ($app_count apps)"
          else
            echo "‚úó Insufficient Splunk apps ($app_count found, minimum 3 required)"
            exit 1
          fi
          
          # Check SOAR playbooks
          playbook_count=$(find soar/playbooks -name "*.py" | wc -l)
          if [ "$playbook_count" -ge 3 ]; then
            echo "‚úì SOAR playbooks present ($playbook_count playbooks)"
          else
            echo "‚úó Insufficient SOAR playbooks ($playbook_count found, minimum 3 required)"
            exit 1
          fi

  # Job 2: Build Release Artifacts
  build-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: pre-release-validation
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Create Splunk app packages
        run: |
          echo "Creating Splunk app packages..."
          mkdir -p release-artifacts/splunk-apps
          
          cd splunk/apps
          for app in */; do
            app_name=$(basename "$app")
            echo "Packaging $app_name..."
            tar -czf "../../release-artifacts/splunk-apps/${app_name}.tar.gz" "$app"
          done
          cd ../..

      - name: Create infrastructure package
        run: |
          echo "Creating infrastructure package..."
          mkdir -p release-artifacts/infrastructure
          
          # Package Terraform modules
          cd infrastructure
          tar -czf "../release-artifacts/infrastructure/terraform-modules.tar.gz" terraform/
          
          # Package Ansible playbooks
          tar -czf "../release-artifacts/infrastructure/ansible-playbooks.tar.gz" ansible/
          cd ..

      - name: Create SOAR package
        run: |
          echo "Creating SOAR package..."
          mkdir -p release-artifacts/soar
          
          cd soar
          tar -czf "../release-artifacts/soar/playbooks.tar.gz" playbooks/
          tar -czf "../release-artifacts/soar/custom-apps.tar.gz" custom-apps/
          cd ..

      - name: Create deployment package
        run: |
          echo "Creating deployment package..."
          mkdir -p release-artifacts/deployment
          
          # Package scripts
          tar -czf "release-artifacts/deployment/scripts.tar.gz" scripts/
          
          # Package documentation
          tar -czf "release-artifacts/deployment/documentation.tar.gz" docs/

      - name: Generate release notes
        run: |
          echo "Generating release notes..."
          
          VERSION="${{ github.event.inputs.version || github.ref_name }}"
          
          cat > release-artifacts/RELEASE_NOTES.md << EOF
          # Enterprise SOC Implementation $VERSION
          
          ## üéØ What's New
          
          $(git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 2>/dev/null || echo "HEAD~10")..HEAD | head -20)
          
          ## üì¶ Release Artifacts
          
          This release includes:
          
          ### Infrastructure as Code
          - **terraform-modules.tar.gz**: Complete Terraform infrastructure
          - **ansible-playbooks.tar.gz**: Ansible automation playbooks
          
          ### Splunk Platform
          - **TA_enterprise_soc.tar.gz**: Technology Add-on
          - **DA_enterprise_soc_detections.tar.gz**: Detection rules
          - **DA_enterprise_soc_dashboards.tar.gz**: Security dashboards
          - **LA_enterprise_soc_lookups.tar.gz**: Lookup tables
          
          ### SOAR Automation
          - **playbooks.tar.gz**: Incident response playbooks
          - **custom-apps.tar.gz**: Custom SOAR applications
          
          ### Deployment Tools
          - **scripts.tar.gz**: Deployment and validation scripts
          - **documentation.tar.gz**: Complete documentation
          
          ## üöÄ Quick Start
          
          1. Download the release artifacts
          2. Follow the [deployment guide](docs/deployment-guides/01-infrastructure-setup.md)
          3. Customize configurations for your environment
          4. Deploy using the automated scripts
          
          ## üìä Metrics
          
          - **Detection Rules**: $(find splunk/apps -name "savedsearches.conf" -exec grep -c "^\[SOC -" {} \; | awk '{sum += $1} END {print sum}') MITRE ATT&CK mapped rules
          - **SOAR Playbooks**: $(find soar/playbooks -name "*.py" | wc -l) automated response workflows
          - **Infrastructure Components**: $(grep -c "resource \"" infrastructure/terraform/*.tf) Terraform resources
          - **Documentation**: $(find docs -name "*.md" | wc -l) documentation files
          
          ## üîí Security
          
          This release has been validated with:
          - Terraform security scanning (TFSec, Checkov)
          - Secret scanning (TruffleHog, GitLeaks)
          - Dependency vulnerability scanning
          - Infrastructure security validation
          
          ## ü§ù Contributors
          
          Thanks to all contributors who made this release possible!
          
          ## üìû Support
          
          - üìñ [Documentation](docs/)
          - üêõ [Issues](https://github.com/bunnyhp/enterprise-soc-blueprint/issues)
          - üí¨ [Discussions](https://github.com/bunnyhp/enterprise-soc-blueprint/discussions)
          EOF

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts-${{ github.event.inputs.version || github.ref_name }}
          path: release-artifacts/
          retention-days: 90

  # Job 3: Create GitHub Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [pre-release-validation, build-artifacts]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download release artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-artifacts-${{ github.event.inputs.version || github.ref_name }}
          path: release-artifacts/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.version || github.ref_name }}
          name: Enterprise SOC Blueprint ${{ github.event.inputs.version || github.ref_name }}
          body_path: release-artifacts/RELEASE_NOTES.md
          files: |
            release-artifacts/splunk-apps/*.tar.gz
            release-artifacts/infrastructure/*.tar.gz
            release-artifacts/soar/*.tar.gz
            release-artifacts/deployment/*.tar.gz
          draft: false
          prerelease: ${{ contains(github.event.inputs.version || github.ref_name, 'rc') || contains(github.event.inputs.version || github.ref_name, 'beta') || contains(github.event.inputs.version || github.ref_name, 'alpha') }}

  # Job 4: Update Documentation
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: create-release
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update README with latest release
        run: |
          VERSION="${{ github.event.inputs.version || github.ref_name }}"
          
          # Update badges in README
          sed -i "s|github/release/bunnyhp/enterprise-soc-blueprint/[^)]*|github/release/bunnyhp/enterprise-soc-blueprint/$VERSION|g" README.md

      - name: Commit documentation updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if git diff --quiet; then
            echo "No documentation changes to commit"
          else
            git add README.md
            git commit -m "docs: update release information for ${{ github.event.inputs.version || github.ref_name }}"
            git push
          fi

  # Job 5: Post-release Notifications
  post-release:
    name: Post-release Notifications
    runs-on: ubuntu-latest
    needs: [create-release, update-docs]
    if: success()
    steps:
      - name: Notify release completion
        run: |
          echo "üéâ Release ${{ github.event.inputs.version || github.ref_name }} completed successfully!"
          echo "üì¶ Artifacts uploaded to GitHub Releases"
          echo "üìñ Documentation updated"
          echo "üöÄ Ready for community use"

      - name: Create announcement issue
        uses: actions/github-script@v6
        with:
          script: |
            const version = "${{ github.event.inputs.version || github.ref_name }}";
            const body = `# üéâ Release ${version} is now available!
            
            ## What's New
            
            This release includes new features, improvements, and bug fixes for the Enterprise SOC Implementation.
            
            ## üì¶ Download
            
            You can download the release artifacts from the [Releases page](https://github.com/bunnyhp/enterprise-soc-blueprint/releases/tag/${version}).
            
            ## üìñ Documentation
            
            - [Deployment Guide](docs/deployment-guides/01-infrastructure-setup.md)
            - [Architecture Overview](docs/architecture/system-overview.md)
            - [Contributing Guidelines](CONTRIBUTING.md)
            
            ## ü§ù Community
            
            We welcome feedback, bug reports, and contributions! Please use:
            - [Issues](https://github.com/bunnyhp/enterprise-soc-blueprint/issues) for bug reports
            - [Discussions](https://github.com/bunnyhp/enterprise-soc-blueprint/discussions) for questions
            - [Pull Requests](https://github.com/bunnyhp/enterprise-soc-blueprint/pulls) for contributions
            
            Thank you to all contributors who made this release possible! üôè`;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üì¢ Release ${version} Announcement`,
              body: body,
              labels: ['announcement', 'release']
            })
