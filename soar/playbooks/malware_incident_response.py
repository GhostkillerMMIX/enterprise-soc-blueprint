"""
Malware Incident Response Playbook
Automated response for malware detection and containment

MITRE ATT&CK Coverage:
- T1055: Process Injection
- T1059: Command and Scripting Interpreter
- T1105: Ingress Tool Transfer
- T1543: Create or Modify System Process
"""

import phantom.rules as phantom
import json
import hashlib
from datetime import datetime, timedelta

def on_start(container, summary):
    """
    Called when the playbook starts
    """
    phantom.debug('Starting Malware Incident Response Playbook')
    
    # Get container artifacts
    artifacts = container.get('artifacts', [])
    
    if not artifacts:
        phantom.error('No artifacts found in container')
        return
    
    # Extract malware information
    artifact = artifacts[0]
    cef_data = artifact.get('cef', {})
    
    # Key malware fields
    host = cef_data.get('host', cef_data.get('dest', 'unknown'))
    file_hash = cef_data.get('file_hash', cef_data.get('hash', ''))
    file_name = cef_data.get('file_name', cef_data.get('filename', ''))
    process_name = cef_data.get('process_name', cef_data.get('process', ''))
    user = cef_data.get('user', 'unknown')
    severity = cef_data.get('severity', cef_data.get('risk_score', 50))
    
    phantom.debug(f'Processing malware incident: host={host}, file={file_name}, hash={file_hash}, severity={severity}')
    
    # Start incident response based on severity
    if int(severity) >= 80:
        # Critical malware - immediate containment
        phantom.debug('Critical malware detected - initiating immediate containment')
        execute_critical_response(container, summary)
    elif int(severity) >= 60:
        # High severity - standard containment
        phantom.debug('High severity malware detected - executing standard response')
        execute_standard_response(container, summary)
    else:
        # Medium/Low severity - investigation and monitoring
        phantom.debug('Medium severity malware detected - investigating')
        execute_investigation_response(container, summary)

def execute_critical_response(container, summary):
    """
    Execute critical response for high-severity malware
    """
    phantom.debug('Executing critical malware response')
    
    artifacts = container.get('artifacts', [])
    artifact = artifacts[0]
    cef_data = artifact.get('cef', {})
    
    host = cef_data.get('host', cef_data.get('dest', 'unknown'))
    file_hash = cef_data.get('file_hash', cef_data.get('hash', ''))
    user = cef_data.get('user', 'unknown')
    
    # 1. Immediate host isolation
    isolate_host_immediately(container, host)
    
    # 2. Kill malicious processes
    terminate_malicious_processes(container, host)
    
    # 3. Block file hash globally
    if file_hash:
        block_file_hash_globally(container, file_hash)
    
    # 4. Disable user account if compromised
    if user != 'unknown' and user != 'SYSTEM':
        disable_user_account(container, user)
    
    # 5. Collect forensic artifacts
    collect_forensic_artifacts(container, host)
    
    # 6. Create critical incident
    create_incident_ticket(
        container,
        priority='P1',
        title=f'CRITICAL: Malware Incident - {host}'
    )
    
    # 7. Send immediate alert
    send_slack_notification(
        container,
        channel='#security-critical',
        message=f'üö® CRITICAL MALWARE INCIDENT\nHost: {host}\nUser: {user}\nImmediate containment executed',
        color='danger'
    )
    
    # 8. Page security team
    page_security_team(container, f'Critical malware incident on {host}')
    
    # 9. Start threat hunting
    initiate_threat_hunting(container, file_hash)

def execute_standard_response(container, summary):
    """
    Execute standard response for medium-high severity malware
    """
    phantom.debug('Executing standard malware response')
    
    artifacts = container.get('artifacts', [])
    artifact = artifacts[0]
    cef_data = artifact.get('cef', {})
    
    host = cef_data.get('host', cef_data.get('dest', 'unknown'))
    file_hash = cef_data.get('file_hash', cef_data.get('hash', ''))
    
    # 1. Quarantine host
    quarantine_host(container, host)
    
    # 2. Analyze file hash
    if file_hash:
        analyze_file_hash(container, file_hash)
    
    # 3. Collect basic artifacts
    collect_basic_artifacts(container, host)
    
    # 4. Search for similar infections
    search_similar_infections(container, file_hash)
    
    # 5. Create standard incident
    create_incident_ticket(
        container,
        priority='P2',
        title=f'Malware Incident - {host}'
    )
    
    # 6. Send team notification
    send_slack_notification(
        container,
        channel='#security-alerts',
        message=f'‚ö†Ô∏è Malware detected and contained\nHost: {host}',
        color='warning'
    )

def execute_investigation_response(container, summary):
    """
    Execute investigation response for lower severity incidents
    """
    phantom.debug('Executing investigation response')
    
    artifacts = container.get('artifacts', [])
    artifact = artifacts[0]
    cef_data = artifact.get('cef', {})
    
    host = cef_data.get('host', cef_data.get('dest', 'unknown'))
    file_hash = cef_data.get('file_hash', cef_data.get('hash', ''))
    
    # 1. Analyze suspicious file
    if file_hash:
        analyze_file_hash(container, file_hash)
    
    # 2. Monitor host activity
    monitor_host_activity(container, host)
    
    # 3. Create investigation ticket
    create_incident_ticket(
        container,
        priority='P3',
        title=f'Suspicious Activity Investigation - {host}'
    )
    
    # 4. Send monitoring notification
    send_slack_notification(
        container,
        channel='#security-investigations',
        message=f'üîç Suspicious activity detected for investigation\nHost: {host}',
        color='good'
    )

# Containment Functions

def isolate_host_immediately(container, hostname):
    """
    Immediately isolate host from network
    """
    phantom.debug(f'Isolating host immediately: {hostname}')
    
    # CrowdStrike isolation
    phantom.act('contain endpoint', parameters={'hostname': hostname}, assets=['crowdstrike'])
    
    # Carbon Black isolation
    phantom.act('isolate endpoint', parameters={'hostname': hostname}, assets=['carbon_black'])
    
    # Firewall isolation as backup
    phantom.act('block host', parameters={'hostname': hostname}, assets=['palo_alto_firewall'])

def quarantine_host(container, hostname):
    """
    Quarantine host with limited network access
    """
    phantom.debug(f'Quarantining host: {hostname}')
    
    # EDR quarantine (allows management traffic)
    phantom.act('quarantine endpoint', parameters={'hostname': hostname}, assets=['crowdstrike'])

def terminate_malicious_processes(container, hostname):
    """
    Terminate malicious processes on host
    """
    phantom.debug(f'Terminating malicious processes on: {hostname}')
    
    artifacts = container.get('artifacts', [])
    artifact = artifacts[0]
    cef_data = artifact.get('cef', {})
    
    process_name = cef_data.get('process_name', cef_data.get('process', ''))
    
    if process_name:
        phantom.act('kill process', 
                    parameters={
                        'hostname': hostname,
                        'process_name': process_name
                    }, 
                    assets=['crowdstrike'])

def block_file_hash_globally(container, file_hash):
    """
    Block file hash across all security tools
    """
    phantom.debug(f'Blocking file hash globally: {file_hash}')
    
    # CrowdStrike hash blocking
    phantom.act('block hash', parameters={'hash': file_hash}, assets=['crowdstrike'])
    
    # Carbon Black hash blocking
    phantom.act('ban hash', parameters={'hash': file_hash}, assets=['carbon_black'])
    
    # Add to threat intelligence
    add_hash_to_threat_intel(container, file_hash)

def disable_user_account(container, username):
    """
    Disable potentially compromised user account
    """
    phantom.debug(f'Disabling user account: {username}')
    phantom.act('disable user', parameters={'username': username}, assets=['active_directory'])

# Analysis Functions

def analyze_file_hash(container, file_hash):
    """
    Analyze file hash with multiple threat intelligence sources
    """
    phantom.debug(f'Analyzing file hash: {file_hash}')
    
    # VirusTotal analysis
    phantom.act('file reputation', parameters={'hash': file_hash}, assets=['virustotal'])
    
    # Hybrid Analysis
    phantom.act('detonate file', parameters={'hash': file_hash}, assets=['hybrid_analysis'])
    
    # Internal threat intel lookup
    phantom.act('lookup hash', parameters={'hash': file_hash}, assets=['misp'])

def search_similar_infections(container, file_hash):
    """
    Search for similar infections across the environment
    """
    phantom.debug(f'Searching for similar infections: {file_hash}')
    
    if file_hash:
        # Search in EDR platforms
        phantom.act('hunt file', parameters={'hash': file_hash}, assets=['crowdstrike'])
        
        # Search in Splunk logs
        query = f'index=edr file_hash="{file_hash}" OR hash="{file_hash}" | stats count by host, user | sort -count'
        phantom.act('run query', parameters={'query': query}, assets=['splunk'])

def initiate_threat_hunting(container, file_hash):
    """
    Initiate threat hunting activities
    """
    phantom.debug('Initiating threat hunting')
    
    artifacts = container.get('artifacts', [])
    artifact = artifacts[0]
    cef_data = artifact.get('cef', {})
    
    # Hunt for related IOCs
    if file_hash:
        hunt_related_iocs(container, file_hash)
    
    # Hunt for lateral movement
    host = cef_data.get('host', cef_data.get('dest', 'unknown'))
    hunt_lateral_movement(container, host)
    
    # Hunt for persistence mechanisms
    hunt_persistence_mechanisms(container, host)

def hunt_related_iocs(container, file_hash):
    """
    Hunt for related indicators of compromise
    """
    phantom.debug(f'Hunting for related IOCs: {file_hash}')
    
    # Get file family information from VirusTotal
    phantom.act('get file info', parameters={'hash': file_hash}, assets=['virustotal'])
    
    # Hunt for similar file names and paths
    query = f'index=edr earliest=-7d | search file_hash!="{file_hash}" | eval similarity=case(match(file_name, ".*malware.*"), 1, match(file_path, ".*temp.*"), 0.5, 1, 0) | where similarity > 0 | stats count by file_hash, file_name, file_path | sort -count'
    phantom.act('run query', parameters={'query': query}, assets=['splunk'])

def hunt_lateral_movement(container, hostname):
    """
    Hunt for lateral movement from infected host
    """
    phantom.debug(f'Hunting for lateral movement from: {hostname}')
    
    # Look for network connections from infected host
    query = f'index=network src_ip={hostname} OR src_host={hostname} earliest=-24h | stats dc(dest_ip) as unique_destinations count by dest_ip, dest_port | where unique_destinations > 10 OR count > 100'
    phantom.act('run query', parameters={'query': query}, assets=['splunk'])
    
    # Look for authentication attempts
    query = f'index=auth src_ip={hostname} OR src_host={hostname} earliest=-24h | stats count by dest_host, user, action | sort -count'
    phantom.act('run query', parameters={'query': query}, assets=['splunk'])

def hunt_persistence_mechanisms(container, hostname):
    """
    Hunt for persistence mechanisms on infected host
    """
    phantom.debug(f'Hunting for persistence mechanisms on: {hostname}')
    
    # Check for scheduled tasks
    phantom.act('list scheduled tasks', parameters={'hostname': hostname}, assets=['crowdstrike'])
    
    # Check for registry modifications
    phantom.act('get registry keys', 
                parameters={
                    'hostname': hostname,
                    'registry_path': 'HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run'
                }, 
                assets=['crowdstrike'])

# Forensics Functions

def collect_forensic_artifacts(container, hostname):
    """
    Collect forensic artifacts from infected host
    """
    phantom.debug(f'Collecting forensic artifacts from: {hostname}')
    
    # Memory dump
    phantom.act('get memory dump', parameters={'hostname': hostname}, assets=['crowdstrike'])
    
    # Process list
    phantom.act('list processes', parameters={'hostname': hostname}, assets=['crowdstrike'])
    
    # Network connections
    phantom.act('get network connections', parameters={'hostname': hostname}, assets=['crowdstrike'])
    
    # File system timeline
    phantom.act('get file timeline', parameters={'hostname': hostname}, assets=['crowdstrike'])

def collect_basic_artifacts(container, hostname):
    """
    Collect basic artifacts for analysis
    """
    phantom.debug(f'Collecting basic artifacts from: {hostname}')
    
    # Process list
    phantom.act('list processes', parameters={'hostname': hostname}, assets=['crowdstrike'])
    
    # Recent file modifications
    phantom.act('get recent files', parameters={'hostname': hostname}, assets=['crowdstrike'])

def monitor_host_activity(container, hostname):
    """
    Monitor host for suspicious activity
    """
    phantom.debug(f'Monitoring host activity: {hostname}')
    
    # Enhanced monitoring in EDR
    phantom.act('enable monitoring', parameters={'hostname': hostname}, assets=['crowdstrike'])
    
    # Create Splunk alert for host activity
    query = f'index=edr host={hostname} | eval risk_score=case(match(process_name, ".*cmd.*|.*powershell.*"), 50, match(file_path, ".*temp.*|.*appdata.*"), 30, 1, 10) | where risk_score >= 30'
    phantom.act('save search', 
                parameters={
                    'name': f'Monitor_{hostname}_Activity',
                    'search': query,
                    'cron_schedule': '*/15 * * * *'
                }, 
                assets=['splunk'])

# Threat Intelligence Functions

def add_hash_to_threat_intel(container, file_hash):
    """
    Add malicious hash to threat intelligence platforms
    """
    phantom.debug(f'Adding hash to threat intelligence: {file_hash}')
    
    # Add to MISP
    phantom.act('create indicator', 
                parameters={
                    'type': 'file',
                    'value': file_hash,
                    'category': 'Payload delivery',
                    'comment': f'Malicious file detected in incident {container.get("id")}'
                }, 
                assets=['misp'])
    
    # Add to custom threat intel feed
    phantom.act('add to list', 
                parameters={
                    'list_name': 'malicious_hashes',
                    'value': file_hash,
                    'category': 'malware'
                }, 
                assets=['splunk'])

# Notification Functions

def page_security_team(container, message):
    """
    Page security team for critical incidents
    """
    phantom.debug('Paging security team')
    phantom.act('send notification', 
                parameters={
                    'message': message,
                    'severity': 'critical'
                }, 
                assets=['pagerduty'])

def create_incident_ticket(container, priority='P3', title='Malware Incident'):
    """
    Create incident ticket in ITSM system
    """
    phantom.debug(f'Creating incident ticket: {title}')
    
    artifacts = container.get('artifacts', [])
    artifact = artifacts[0]
    cef_data = artifact.get('cef', {})
    
    description = f"""
    Malware Incident Details:
    - Host: {cef_data.get('host', cef_data.get('dest', 'N/A'))}
    - File Name: {cef_data.get('file_name', cef_data.get('filename', 'N/A'))}
    - File Hash: {cef_data.get('file_hash', cef_data.get('hash', 'N/A'))}
    - Process: {cef_data.get('process_name', cef_data.get('process', 'N/A'))}
    - User: {cef_data.get('user', 'N/A')}
    - Severity: {cef_data.get('severity', cef_data.get('risk_score', 'N/A'))}
    - Detection Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
    - Container ID: {container.get('id')}
    """
    
    phantom.act('create ticket',
                parameters={
                    'title': title,
                    'description': description,
                    'priority': priority,
                    'category': 'Malware Incident'
                },
                assets=['servicenow'])

def send_slack_notification(container, channel='#security-alerts', message='Malware Alert', color='warning'):
    """
    Send notification to Slack channel
    """
    phantom.debug(f'Sending Slack notification to {channel}')
    
    artifacts = container.get('artifacts', [])
    artifact = artifacts[0]
    cef_data = artifact.get('cef', {})
    
    attachment = {
        'color': color,
        'fields': [
            {'title': 'Host', 'value': cef_data.get('host', cef_data.get('dest', 'N/A')), 'short': True},
            {'title': 'File', 'value': cef_data.get('file_name', cef_data.get('filename', 'N/A')), 'short': True},
            {'title': 'User', 'value': cef_data.get('user', 'N/A'), 'short': True},
            {'title': 'Severity', 'value': cef_data.get('severity', cef_data.get('risk_score', 'N/A')), 'short': True}
        ],
        'footer': 'Enterprise SOC SOAR - Malware Response',
        'ts': int(datetime.now().timestamp())
    }
    
    phantom.act('send message',
                parameters={
                    'channel': channel,
                    'message': message,
                    'attachments': json.dumps([attachment])
                },
                assets=['slack'])

def on_finish(container, summary):
    """
    Called when the playbook finishes
    """
    phantom.debug('Malware Incident Response Playbook completed')
    
    # Update container status
    phantom.set_status(container, 'closed')
    
    # Add summary note
    artifacts = container.get('artifacts', [])
    artifact = artifacts[0]
    cef_data = artifact.get('cef', {})
    
    summary_note = f"""
    Malware Incident Response Summary:
    - Host: {cef_data.get('host', cef_data.get('dest', 'N/A'))}
    - Response Level: {cef_data.get('severity', 'Standard')}
    - Actions Taken: Containment, Analysis, Investigation
    - Completion Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
    """
    
    phantom.add_note(container, summary_note)
