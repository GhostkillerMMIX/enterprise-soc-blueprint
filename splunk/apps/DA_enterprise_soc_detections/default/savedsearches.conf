# Enterprise SOC Detection Rules
# ATT&CK Framework Mapped Detections

# T1059.001 - PowerShell Execution
[SOC - Suspicious PowerShell Execution]
search = index=winevent sourcetype=WinEventLog:Security EventCode=4688 CommandLine=*powershell* (CommandLine=*-EncodedCommand* OR CommandLine=*-enc* OR CommandLine=*-e* OR CommandLine=*bypass* OR CommandLine=*-nop* OR CommandLine=*hidden* OR CommandLine=*downloadstring* OR CommandLine=*iex* OR CommandLine=*invoke-expression*) | stats count min(_time) as first_seen max(_time) as last_seen by host, user, NewProcessName, CommandLine | where count>=1 | eval risk_score=60, risk_object=host, risk_rule="Suspicious PowerShell Execution"
dispatch.earliest_time = -15m
dispatch.latest_time = now
cron_schedule = */15 * * * *
enableSched = 1
alert.track = 1
alert.severity = 3
action.notable = 1
action.notable.param.severity = medium
action.notable.param.rule_title = Suspicious PowerShell Execution Detected
action.notable.param.rule_description = Detected potentially malicious PowerShell execution with suspicious command line arguments
action.notable.param.nes_fields = host,user,CommandLine
action.notable.param.drilldown_name = View PowerShell Events
action.notable.param.drilldown_search = index=winevent sourcetype=WinEventLog:Security EventCode=4688 host="$host$" user="$user$" CommandLine=*powershell*

# T1003.001 - LSASS Memory Dump
[SOC - LSASS Memory Access]
search = index=winevent sourcetype=WinEventLog:Security EventCode=4656 ObjectName=*lsass.exe* AccessMask=0x1010 | stats count min(_time) as first_seen max(_time) as last_seen by host, user, ProcessName | where count>=1 | eval risk_score=80, risk_object=host, risk_rule="LSASS Memory Access"
dispatch.earliest_time = -5m
dispatch.latest_time = now
cron_schedule = */5 * * * *
enableSched = 1
alert.track = 1
alert.severity = 4
action.notable = 1
action.notable.param.severity = high
action.notable.param.rule_title = LSASS Memory Access Detected
action.notable.param.rule_description = Detected process accessing LSASS memory which may indicate credential dumping
action.notable.param.nes_fields = host,user,ProcessName

# T1078.004 - Cloud Account Abuse (Okta)
[SOC - Okta Impossible Travel]
search = index=okta sourcetype=okta:system eventType=user.session.start | iplocation src_ip | streamstats current=f window=1 last(lat) as prev_lat last(lon) as prev_lon last(_time) as prev_time by user | eval km=haversine(lat, lon, prev_lat, prev_lon) | eval kph=km/((_time - prev_time)/3600) | where kph>900 | eval risk_score=70, risk_object=user, risk_rule="Impossible Travel"
dispatch.earliest_time = -60m
dispatch.latest_time = now
cron_schedule = 0 * * * *
enableSched = 1
alert.track = 1
alert.severity = 3
action.notable = 1
action.notable.param.severity = medium
action.notable.param.rule_title = Impossible Travel Detected
action.notable.param.rule_description = User logged in from geographically impossible locations within short timeframe
action.notable.param.nes_fields = user,src_ip,Country,City

# T1190 - Exploit Public-Facing Application
[SOC - Web Application Attack]
search = index=proxy OR index=network sourcetype=pan:traffic OR sourcetype=zeek:http (status_code>=400 AND status_code<500) OR (uri=*../* OR uri=*<script* OR uri=*' OR uri=*" OR uri=*union* OR uri=*select* OR uri=*drop* OR uri=*insert* OR uri=*update* OR uri=*delete* OR uri=*exec*) | stats count dc(uri) as unique_uris by src_ip, dest_ip | where count>50 OR unique_uris>20 | eval risk_score=65, risk_object=src_ip, risk_rule="Web Application Attack"
dispatch.earliest_time = -30m
dispatch.latest_time = now
cron_schedule = */30 * * * *
enableSched = 1
alert.track = 1
alert.severity = 3
action.notable = 1
action.notable.param.severity = medium
action.notable.param.rule_title = Web Application Attack Detected
action.notable.param.rule_description = Multiple web application attack indicators detected from source IP
action.notable.param.nes_fields = src_ip,dest_ip,unique_uris

# T1021.001 - Remote Desktop Protocol
[SOC - Suspicious RDP Activity]
search = index=winevent sourcetype=WinEventLog:Security (EventCode=4624 LogonType=10) OR (EventCode=4625 LogonType=10) | stats count(eval(EventCode=4624)) as successful_logins count(eval(EventCode=4625)) as failed_logins by src_ip, user, dest | where failed_logins>5 AND successful_logins>0 | eval risk_score=55, risk_object=src_ip, risk_rule="Suspicious RDP Activity"
dispatch.earliest_time = -60m
dispatch.latest_time = now
cron_schedule = 0 * * * *
enableSched = 1
alert.track = 1
alert.severity = 2
action.notable = 1
action.notable.param.severity = low
action.notable.param.rule_title = Suspicious RDP Activity
action.notable.param.rule_description = Multiple failed RDP attempts followed by successful login
action.notable.param.nes_fields = src_ip,user,dest,failed_logins

# T1566.001 - Spearphishing Attachment
[SOC - Suspicious Email Attachment]
search = index=email (attachment=*.exe OR attachment=*.scr OR attachment=*.bat OR attachment=*.cmd OR attachment=*.com OR attachment=*.pif OR attachment=*.vbs OR attachment=*.js OR attachment=*.jar OR attachment=*.zip) | stats count by sender, recipient, subject, attachment | where count>=1 | eval risk_score=50, risk_object=recipient, risk_rule="Suspicious Email Attachment"
dispatch.earliest_time = -30m
dispatch.latest_time = now
cron_schedule = */30 * * * *
enableSched = 1
alert.track = 1
alert.severity = 2
action.notable = 1
action.notable.param.severity = low
action.notable.param.rule_title = Suspicious Email Attachment
action.notable.param.rule_description = Email with potentially malicious attachment detected
action.notable.param.nes_fields = sender,recipient,subject,attachment

# T1055 - Process Injection
[SOC - Process Injection Detection]
search = index=winevent sourcetype=WinEventLog:Security EventCode=4688 (CommandLine=*CreateRemoteThread* OR CommandLine=*WriteProcessMemory* OR CommandLine=*VirtualAllocEx* OR CommandLine=*SetWindowsHookEx* OR CommandLine=*NtCreateThreadEx*) | stats count min(_time) as first_seen max(_time) as last_seen by host, user, ProcessName, CommandLine | where count>=1 | eval risk_score=75, risk_object=host, risk_rule="Process Injection"
dispatch.earliest_time = -15m
dispatch.latest_time = now
cron_schedule = */15 * * * *
enableSched = 1
alert.track = 1
alert.severity = 4
action.notable = 1
action.notable.param.severity = high
action.notable.param.rule_title = Process Injection Detected
action.notable.param.rule_description = Detected process injection techniques commonly used by malware
action.notable.param.nes_fields = host,user,ProcessName,CommandLine

# T1071.001 - Application Layer Protocol (DNS)
[SOC - DNS Tunneling Detection]
search = index=dns sourcetype=zeek:dns | stats count avg(len(query)) as avg_query_length dc(query) as unique_queries by src_ip | where avg_query_length>50 AND unique_queries>100 AND count>1000 | eval risk_score=70, risk_object=src_ip, risk_rule="DNS Tunneling"
dispatch.earliest_time = -60m
dispatch.latest_time = now
cron_schedule = 0 * * * *
enableSched = 1
alert.track = 1
alert.severity = 3
action.notable = 1
action.notable.param.severity = medium
action.notable.param.rule_title = DNS Tunneling Detected
action.notable.param.rule_description = Detected potential DNS tunneling based on query patterns
action.notable.param.nes_fields = src_ip,avg_query_length,unique_queries

# T1110.003 - Password Spraying
[SOC - Password Spraying Attack]
search = index=auth sourcetype=okta:system eventType=user.authentication.auth_via_mfa OR eventType=user.authentication.authenticate (outcome.result=FAILURE OR outcome.result=SUCCESS) | stats dc(user) as unique_users count(eval(match(outcome.result,"FAILURE"))) as failures count(eval(match(outcome.result,"SUCCESS"))) as successes by src_ip | where unique_users>10 AND failures>50 | eval risk_score=80, risk_object=src_ip, risk_rule="Password Spraying"
dispatch.earliest_time = -60m
dispatch.latest_time = now
cron_schedule = 0 * * * *
enableSched = 1
alert.track = 1
alert.severity = 4
action.notable = 1
action.notable.param.severity = high
action.notable.param.rule_title = Password Spraying Attack
action.notable.param.rule_description = Detected password spraying attack against multiple user accounts
action.notable.param.nes_fields = src_ip,unique_users,failures

# Risk-Based Alerting Correlation
[SOC - High Risk Score Correlation]
search = | from datamodel:"Risk"."All_Risk" | stats sum(risk_score) as total_risk_score dc(risk_rule) as unique_rules values(risk_rule) as rules by risk_object | where total_risk_score>=100 | eval alert_priority=case(total_risk_score>=200,"Critical",total_risk_score>=150,"High",total_risk_score>=100,"Medium")
dispatch.earliest_time = -24h
dispatch.latest_time = now
cron_schedule = */30 * * * *
enableSched = 1
alert.track = 1
alert.severity = 4
action.notable = 1
action.notable.param.severity = high
action.notable.param.rule_title = High Risk Score Alert
action.notable.param.rule_description = Risk object exceeded risk threshold based on multiple detection rules
action.notable.param.nes_fields = risk_object,total_risk_score,unique_rules,rules
